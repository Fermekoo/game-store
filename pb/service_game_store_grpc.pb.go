// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: service_game_store.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameStoreClient is the client API for GameStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameStoreClient interface {
	Order(ctx context.Context, in *OrderCallRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	Profile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProfileResponse, error)
	Service(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	Game(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameResponse, error)
}

type gameStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewGameStoreClient(cc grpc.ClientConnInterface) GameStoreClient {
	return &gameStoreClient{cc}
}

func (c *gameStoreClient) Order(ctx context.Context, in *OrderCallRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/pb.GameStore/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) Profile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.GameStore/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) Service(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/pb.GameStore/Service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameStoreClient) Game(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, "/pb.GameStore/Game", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameStoreServer is the server API for GameStore service.
// All implementations must embed UnimplementedGameStoreServer
// for forward compatibility
type GameStoreServer interface {
	Order(context.Context, *OrderCallRequest) (*OrderResponse, error)
	Profile(context.Context, *emptypb.Empty) (*ProfileResponse, error)
	Service(context.Context, *ServiceRequest) (*ServiceResponse, error)
	Game(context.Context, *emptypb.Empty) (*GameResponse, error)
	mustEmbedUnimplementedGameStoreServer()
}

// UnimplementedGameStoreServer must be embedded to have forward compatible implementations.
type UnimplementedGameStoreServer struct {
}

func (UnimplementedGameStoreServer) Order(context.Context, *OrderCallRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedGameStoreServer) Profile(context.Context, *emptypb.Empty) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedGameStoreServer) Service(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service not implemented")
}
func (UnimplementedGameStoreServer) Game(context.Context, *emptypb.Empty) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Game not implemented")
}
func (UnimplementedGameStoreServer) mustEmbedUnimplementedGameStoreServer() {}

// UnsafeGameStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameStoreServer will
// result in compilation errors.
type UnsafeGameStoreServer interface {
	mustEmbedUnimplementedGameStoreServer()
}

func RegisterGameStoreServer(s grpc.ServiceRegistrar, srv GameStoreServer) {
	s.RegisterService(&GameStore_ServiceDesc, srv)
}

func _GameStore_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameStore/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).Order(ctx, req.(*OrderCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameStore/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).Profile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_Service_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).Service(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameStore/Service",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).Service(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameStore_Game_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStoreServer).Game(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameStore/Game",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStoreServer).Game(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GameStore_ServiceDesc is the grpc.ServiceDesc for GameStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameStore",
	HandlerType: (*GameStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Order",
			Handler:    _GameStore_Order_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _GameStore_Profile_Handler,
		},
		{
			MethodName: "Service",
			Handler:    _GameStore_Service_Handler,
		},
		{
			MethodName: "Game",
			Handler:    _GameStore_Game_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_game_store.proto",
}
